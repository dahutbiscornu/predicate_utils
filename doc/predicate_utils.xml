<?xml version="1.0" encoding="utf-8"?>
<document version="1.0.0">
  <title>PredicateUtils</title>
  <author>Ingemar Axelsson</author>

  <chapter name="Preface" notoc="true">
    <h1>Purpose</h1>
    <p>
      This document provides step-by-step instructions on how to
      install, configure, and use the PredicateUtils xCelerator.
    </p>

    <h1>Intended audience</h1>
    <p>The information in this guide is intended for xCP application
      designers and developers who need to configure and administer
      processes within the Process Builder software. The objective of
      this xCelerator is to save time and effort when implementing
      process that need to perform simple string operations as part of
      the process flow.</p>

    <h1>Related documentation</h1>
    <p>The EMC Documentum xCelerator home page
      (<code>https://community.emc.com/docs/DOC-6143</code>) provieds access to xCP
      xCelerators.</p>

    <h1>Revision history</h1>
  </chapter>

  <chapter name="Overview">
    <h1>PredicateUtils</h1>
    <p>The PredicateUtils xCelerator provides commonly used boolean
      operators, such as 'and', 'or', 'not' functions, it also
      provides methods to determine if two primitive objects are
      equal or not, as well as some commonly used comparison operators.
      It also provides some simple date operators to be able to
      decide if a date is before, equal to, or after another date.</p>
    <p>This makes it possible for a developer to easily validate and build
      more complex business rules.</p>
    <p>Using the PredicateUtils will make the decision evaluation less
    error prone, and it will also enhance the possibilities of what you
    can decide upon.</p>

	<h2>Feature requests</h2>
	<p>Feature requests can be submitted through github
	<code>https://github.com/ingax146/predicate_utils</code>.</p>

    <h1>Bill of Material</h1>
    <p>The PredicateUtils xCelerator is accessible through the EMC
      Documentum Community xCelerator xChange home page
      (<code>https://community.emc.com/docs/DOC-7597</code>) by selecting the
      PredicateUtils xCelerator link.</p>
	<p>The <code>predicate_utils.zip</code> file contains:</p>
	<list>
		<item>predicate_utils.pdf - This document</item>
		<item>predicate_utils.dar - DAR file with module.</item>
		<item>predicate_utils_javadoc.zip - API Documentation</item>
		<item>predicate_utils.installparam - Installation parameters</item>
		<item>predicate_utils.jar - Interface jar file</item>
		<item>predicate_utilsImpl.jar - Implementation jar file</item>
		<item>predicate_utils_src.zip - Source code</item>
	</list>

	<h2>Source code and issue tracking</h2>
	<p>Source code and issue tracker can also be found in a git repository at
	<code>https://github.com/ingax146/predicate_utils</code>. Feel free to
	contribute to this xCelerator by adding more methods if needed. More
	information about using git can be found at the
	<code>https://github.com</code>.</p>
  </chapter>
 
  <chapter name="Installing xCelerator">
    <h1>Prerequisites</h1>
    <list>
      <item>Composer 6.7 or later.</item>
      <item>Process Builder 6.7 or later.</item>
      <item>predicate_utils.dar</item>
      <item>predicate_utils.installparam</item>
    </list>
    <p>Notice that all objects in the zip file are not needed to
    install the PredicateUtils xCelerator.</p>

    <h1>Installing the PredicateUtils DAR</h1>
    <p>
      Install the  PredicateUtils DAR using the DAR Installer packaged
      with Documentum Composer, which is the preferred installation
      method. You can also use the Documentum Composer non-UI command
      line version, known as headless Composer, to install the DAR
      file. Detailed instructions for installing DARs and using the
      DAR Installer or the headless Composer are available in the
      Documentum Composer User Guide. You must be a superuser or EMC
      Documentum dministrator to install a DAR using the DAR Installer
      or Documentum headless Composer.
    </p>
    <p>To install the  PredicateUtils DAR:</p>
    <numlist>
      <item>Download the <code>predicate_utils.zip</code> file which is
      accessible through the EMC Documentum xCelerator community home
      page (<code>https://community.emc.com/docs/DOC-7597</code>) by selecting the
      PredicateUtils xCelerator link.</item>
      <item>Unzip the <code>predicate_utils.zip</code> file and locate
      the PredicateUtils.dar file.</item>
      <item>Install the PredicateUtils DAR file using the DAR
      Installer (or headless Composer) according to the instructions
      provided in the Documentum Composer User Guide.</item>
    </numlist>
  </chapter>

  <chapter name="Using PredicateUtils xCelerator">

    <h1>How to use the PredicateUtils xCelerator</h1>
	<p>The PredicateUtils xCelerator is created to be used as a process activity.
	Using the built in BOF module activity. The xCelerator is intentionally not
	thread safe, this so it performs faster as a BOF activity module. It should 
	be safe to use it in this environment.</p>

    <h1>Overview of the Methods PredicateUtils provides</h1>
    <p>Binary methods below are accepting arrays of different types. Each
    operator is implementing element by element comparison. That is,
    <code>rhs[0] == lhs[0]</code>, <code>rhs[1] == lhs[1]</code> and so
    on.</p>

    <p>The consequences of this is that both input arrays must be of
    equal length.</p>

    <p>Unary methods accepts just one array, and it will operate on
    each element if its return type is an array.</p>

    <h2>Boolean methods</h2>

    <function>
      <signature>Boolean[] <name>not</name>(final Boolean[] values)</signature>
      <description>
	Inverts the boolean values given by the input array, and
	produces an output array of the same length, with the
	result.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>and</name>(final Boolean[] rhs, final Boolean[] lhs)
      </signature>
      <description>
	Returns true if and only if both of the two input booleans
	are true. Otherwise false.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>or</name>(final Boolean[] rhs, final Boolean[] lhs)
      </signature>
      <description>
	Returns true if one or both of the input booleans are true. Otherwise false.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>lessThan</name>(final Double[] rhs, final Double[] lhs)
      </signature>
      <description>
	Applies the <code>Double.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>lessThanEqual</name>(final Double[] rhs, final Double[] lhs)
      </signature>
      <description>
	Applies the <code>Double.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>greaterThan</name>(final Double[] rhs, final Double[] lhs)
      </signature>
      <description>
	Applies the <code>Double.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>greaterThanEqual</name>(final Double[] rhs, final Double[] lhs)
      </signature>
      <description>
	Applies the <code>Double.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>equals</name>(final Double[] rhs, final Double[] lhs)
      </signature>
      <description>
	Applies the <code>Double.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>equals</name>(final String[] rhs, final String[] lhs)
      </signature>
      <description>
	Applies the <code>String.compareTo()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>equalsIgnoreCase</name>(final String[] rhs, final String[] lhs)
      </signature>
      <description>
	Applies the <code>String.compareIgnoreCase()</code>
	method. See Java SE 6 reference for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>equals</name>(final Date[] rhs, final Date[] lhs)
      </signature>
      <description>
	Applies the <code>Date.equals()</code> method. See Java SE 6 reference
	for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>before</name>(final Date[] rhs, final Date[] lhs)
      </signature>
      <description>
	Applies the <code>Date.before()</code> method. See Java SE 6 reference
	for more information.
      </description>
    </function>
    <function>
      <signature>
	Boolean[] <name>after</name>(final Date[] rhs, final Date[] lhs)
      </signature>
      <description>
	Applies the <code>Date.after()</code> method. See Java SE 6 reference
	for more information.
      </description>
    </function>
  </chapter>
</document>